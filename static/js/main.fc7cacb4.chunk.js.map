{"version":3,"sources":["App.js","components/Box.jsx","components/Grid.jsx","components/Graph.jsx","components/Nav.jsx","serviceWorker.js","index.js"],"names":["App","Box","props","className","onClick","onPointerEnter","onPointerDown","onPointerUp","value","Grid","i","boxContent","this","startBoxIndex","endBoxIndex","resultBoxes","includes","wallBoxes","transitionBoxes","coveredBoxes","key","id","box","ROW","rows","COL","cols","arrRow","Array","fill","arrCol","console","log","boxRows","map","indexRow","indexCol","renderBox","Component","Graph","Math","floor","window","innerHeight","wallPointer","state","distance","visited","parent","rowNum","colNum","arr","push","setState","newWallBoxes","splice","indexOf","transBoxes","resultFlag","totalBoxes","length","newTransBoxes","getEdgeBoxes","Promise","resolve","setTimeout","loopLength","currentResultBox","boxClick","wallPointerDown","createWall","wallPointerUp","class","buttonStart","Nav","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc7cacb4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a className=\"App-link\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Graph_Project_App\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport \"../style/Graph.css\";\n\nconst Box = (props) => {\n  return (\n    <button\n      className={props.className}\n      onClick={props.onClick}\n      onPointerEnter={props.onPointerEnter}\n      onPointerDown={props.onPointerDown}\n      onPointerUp={props.onPointerUp}\n    >\n      {props.value}\n    </button>\n  );\n};\nexport default Box;\n","import React, { Component } from \"react\";\nimport Box from \"./Box\";\n\nclass Grid extends Component {\n  renderBox(i) {\n    let className;\n    let { boxContent } = this.props;\n    if (boxContent.startBoxIndex === i) {\n      className = \"startBox\";\n    } else if (boxContent.endBoxIndex === i) {\n      className = \"endBox\";\n    } else if (boxContent.resultBoxes.includes(i)) {\n      className = \"resultBox\";\n    } else if (boxContent.wallBoxes.includes(i)) {\n      className = \"wallBox\";\n    } else if (boxContent.transitionBoxes.includes(i)) {\n      className = \"transitionBox\";\n    } else if (boxContent.coveredBoxes.includes(i)) {\n      className = \"coveredBox\";\n    } else {\n      className = \"box\";\n    }\n    return (\n      <Box\n        key={i}\n        id={i}\n        className={className}\n        value={this.props.boxContent.box[i]}\n        onClick={() => this.props.onClick(i)}\n        onPointerDown={() => this.props.onPointerDown(i)}\n        onPointerEnter={() => this.props.onPointerEnter(i)}\n        onPointerUp={() => this.props.onPointerUp(i)}\n      />\n    );\n  }\n\n  render() {\n    const ROW = this.props.rows,\n      COL = this.props.cols;\n    const arrRow = Array(ROW).fill(null),\n      arrCol = Array(COL).fill(null);\n    console.log(\"boxContent from Grid: \", this.props.boxContent);\n    const boxRows = arrRow.map((box, indexRow) => {\n      return (\n        <div className=\"grid-row\" id={indexRow} key={indexRow}>\n          {arrCol.map((box, indexCol) => {\n            return this.renderBox(indexRow * COL + indexCol);\n          })}\n        </div>\n      );\n    });\n\n    return <div>{boxRows}</div>;\n  }\n}\nexport default Grid;\n","import React, { Component } from \"react\";\nimport \"../style/Graph.css\";\nimport Grid from \"./Grid\";\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n    const ROW = Math.floor(window.innerHeight / 33),\n      COL = 30;\n    let wallPointer = false;\n    this.wallPointer = wallPointer;\n    this.ROW = ROW;\n    this.COL = COL;\n    const totalBoxes = ROW * COL;\n    let box = Array(ROW * COL).fill(null);\n    this.state = {\n      boxContent: {\n        box: box,\n        startBoxIndex: null,\n        endBoxIndex: null,\n        wallBoxes: [],\n        resultBoxes: [],\n        transitionBoxes: [],\n        coveredBoxes: [],\n        distance: 0,\n      },\n    };\n  }\n  getEdgeBoxes(id, visited, parent) {\n    const ROW = this.ROW,\n      COL = this.COL;\n    const rowNum = Math.floor(id / COL);\n    const colNum = id % COL;\n    let arr = [];\n    if (rowNum !== 0 && !visited[id - COL]) {\n      arr.push(id - COL);\n      visited[id - COL] = true;\n      parent[id - COL] = id;\n    }\n    if (rowNum !== ROW - 1 && !visited[id + COL]) {\n      arr.push(id + COL);\n      visited[id + COL] = true;\n      parent[id + COL] = id;\n    }\n    if (colNum !== 0 && !visited[id - 1]) {\n      arr.push(id - 1);\n      visited[id - 1] = true;\n      parent[id - 1] = id;\n    }\n    if (colNum !== COL - 1 && !visited[id + 1]) {\n      arr.push(id + 1);\n      visited[id + 1] = true;\n      parent[id + 1] = id;\n    }\n    //To consider corner edges.\n    /*     if (rowNum !== 0 && colNum !== 0 && !visited[id - COL - 1]) {\n      arr.push(id - COL - 1);\n      visited[id - COL - 1] = true;\n      parent[id - COL - 1] = id;\n    }\n    if (rowNum !== 0 && colNum !== COL - 1 && !visited[id - COL + 1]) {\n      arr.push(id - COL + 1);\n      visited[id - COL + 1] = true;\n      parent[id - COL + 1] = id;\n    }\n    if (rowNum !== ROW - 1 && colNum !== COL - 1 && !visited[id + COL + 1]) {\n      arr.push(id + COL + 1);\n      visited[id + COL + 1] = true;\n      parent[id + COL + 1] = id;\n    }\n    if (rowNum !== ROW - 1 && colNum !== 0 && !visited[id + COL - 1]) {\n      arr.push(id + COL - 1);\n      visited[id + COL - 1] = true;\n      parent[id + COL - 1] = id;\n    } */\n    return arr;\n  }\n  boxClick(i) {\n    const boxContent = this.state.boxContent,\n      box = boxContent.box,\n      { startBoxIndex, endBoxIndex, distance } = boxContent;\n    if (startBoxIndex === null) {\n      this.setState({\n        boxContent: {\n          box: box,\n          startBoxIndex: i,\n          endBoxIndex: null,\n          wallBoxes: this.state.boxContent.wallBoxes,\n          resultBoxes: [],\n          transitionBoxes: [],\n          coveredBoxes: [],\n          distance: distance,\n        },\n      });\n      console.log(\"From BoxClick startBoxIndex = \", this.state);\n    } else if (startBoxIndex !== null && endBoxIndex === null) {\n      if (startBoxIndex === i) {\n        return;\n      } else {\n        this.setState({\n          boxContent: {\n            box: box,\n            startBoxIndex: startBoxIndex,\n            endBoxIndex: i,\n            wallBoxes: this.state.boxContent.wallBoxes,\n            resultBoxes: [],\n            transitionBoxes: [],\n            coveredBoxes: [],\n            distance: distance,\n          },\n        });\n        console.log(\"From boxClick endBoxIndex = \", this.state);\n      }\n    }\n    console.log(\"From boxClick endline = \", this.state);\n    return;\n  }\n  wallPointerDown(i) {\n    const boxContent = this.state.boxContent,\n      box = boxContent.box,\n      {\n        startBoxIndex,\n        endBoxIndex,\n        resultBoxes,\n        transitionBoxes,\n        coveredBoxes,\n        wallBoxes,\n        distance,\n      } = boxContent;\n    if (startBoxIndex !== null && endBoxIndex !== null) {\n      this.wallPointer = true;\n      let newWallBoxes = wallBoxes;\n      newWallBoxes.push(i);\n      this.setState({\n        boxContent: {\n          box: box,\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: newWallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transitionBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n      });\n    }\n  }\n  wallPointerUp(i) {\n    this.wallPointer = false;\n  }\n  createWall(i) {\n    const boxContent = this.state.boxContent,\n      box = boxContent.box,\n      {\n        startBoxIndex,\n        endBoxIndex,\n        resultBoxes,\n        transitionBoxes,\n        coveredBoxes,\n        distance,\n      } = boxContent;\n    if (startBoxIndex !== null && endBoxIndex !== null && this.wallPointer) {\n      let newWallBoxes = this.state.boxContent.wallBoxes;\n      newWallBoxes.push(i);\n      this.setState({\n        boxContent: {\n          box: box,\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: newWallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transitionBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n      });\n    }\n  }\n  async buttonStart() {\n    const boxContent = this.state.boxContent,\n      box = boxContent.box,\n      { startBoxIndex, endBoxIndex } = boxContent;\n    let { wallBoxes } = boxContent;\n    while (wallBoxes.includes(endBoxIndex)) {\n      wallBoxes.splice(wallBoxes.indexOf(endBoxIndex), 1);\n    }\n\n    let transBoxes = [],\n      resultBoxes = [],\n      coveredBoxes = [],\n      distance = 0,\n      resultFlag = true;\n    let totalBoxes = this.ROW * this.COL;\n    let visited = Array(totalBoxes).fill(false);\n    for (let i = 0; i < wallBoxes.length; i++) {\n      visited[wallBoxes[i]] = true;\n    }\n    let parent = Array(totalBoxes).fill(null);\n    visited[boxContent.startBoxIndex] = true;\n    transBoxes.push(startBoxIndex);\n    let newTransBoxes = [];\n    while (!transBoxes.includes(endBoxIndex)) {\n      distance++;\n      newTransBoxes = [];\n      for (let i = 0; i < transBoxes.length; i++) {\n        newTransBoxes.push(\n          ...this.getEdgeBoxes(transBoxes[i], visited, parent)\n        );\n      }\n      if (newTransBoxes.length === 0) {\n        resultFlag = false;\n        coveredBoxes.push(...transBoxes);\n        return;\n      }\n      coveredBoxes.push(...transBoxes);\n      transBoxes = [...newTransBoxes];\n      await new Promise((resolve) => setTimeout(resolve, 20));\n      this.setState({\n        boxContent: {\n          box: box,\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: wallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n      });\n    }\n    if (resultFlag) {\n      coveredBoxes.push(...transBoxes);\n      let loopLength = distance,\n        currentResultBox = parent[endBoxIndex];\n      do {\n        resultBoxes.push(currentResultBox);\n        await new Promise((resolve) => setTimeout(resolve, 20));\n        console.log(\"currentRBox: \", currentResultBox);\n        this.setState({\n          boxContent: {\n            box: box,\n            startBoxIndex: startBoxIndex,\n            endBoxIndex: endBoxIndex,\n            wallBoxes: wallBoxes,\n            resultBoxes: resultBoxes,\n            coveredBoxes: coveredBoxes,\n            transitionBoxes: [],\n            distance: distance,\n          },\n        });\n        currentResultBox = parent[currentResultBox];\n        loopLength--;\n      } while (loopLength !== 0);\n    }\n  }\n\n  render() {\n    const boxContent = this.state.boxContent;\n\n    return (\n      <div className=\"graph\">\n        <div className=\"graph-grid\">\n          <Grid\n            rows={this.ROW}\n            cols={this.COL}\n            boxContent={boxContent}\n            onClick={(i) => this.boxClick(i)}\n            onPointerDown={(i) => this.wallPointerDown(i)}\n            onPointerEnter={(i) => this.createWall(i)}\n            onPointerUp={(i) => this.wallPointerUp(i)}\n          />\n        </div>\n        <div className=\"graph-info\">\n          <button\n            class=\"btn btn-primary btn-md\"\n            onClick={() => this.buttonStart()}\n          >\n            Start\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Graph;\n","import React, { Component } from \"react\";\nclass Nav extends Component {\n  render() {\n    return (\n      <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a class=\"navbar-brand\" href=\"#\">\n          Navbar\n        </a>\n        <button\n          class=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavDropdown\"\n          aria-controls=\"navbarNavDropdown\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul class=\"navbar-nav\">\n            <li class=\"nav-item active\">\n              <a class=\"nav-link\" href=\"#\">\n                Home <span class=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"#\">\n                Features\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"#\">\n                Pricing\n              </a>\n            </li>\n            <li class=\"nav-item dropdown\">\n              <a\n                class=\"nav-link dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdownMenuLink\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Dropdown link\n              </a>\n              <div\n                class=\"dropdown-menu\"\n                aria-labelledby=\"navbarDropdownMenuLink\"\n              >\n                <a class=\"dropdown-item\" href=\"#\">\n                  Action\n                </a>\n                <a class=\"dropdown-item\" href=\"#\">\n                  Another action\n                </a>\n                <a class=\"dropdown-item\" href=\"#\">\n                  Something else here\n                </a>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\nimport Graph from \"./components/Graph.jsx\";\nimport Nav from \"./components/Nav.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Nav />\n    <Graph />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}