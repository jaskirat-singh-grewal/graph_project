{"version":3,"sources":["gifs/graphImg.jpg","gifs/1.gif","gifs/2.gif","gifs/3.gif","gifs/4.gif","gifs/5.gif","components/Box.jsx","components/Grid.jsx","components/Graph.jsx","components/Nav.jsx","components/GsModal.jsx","index.js"],"names":["module","exports","Box","props","style","icon","offsetBool","width","boxSize","allBoxOffset","className","valueOf","class","onClick","onPointerEnter","onPointerDown","onPointerUp","Grid","i","coli","Math","floor","this","sizeOffset","cols","boxContent","startBoxIndex","endBoxIndex","resultBoxes","includes","wallBoxes","transitionBoxes","coveredBoxes","key","id","value","box","ROW","rows","COL","arrRow","Array","fill","arrCol","boxRows","map","indexRow","indexCol","renderBox","Component","Graph","BOXSIZE","wallPointer","state","distance","status","row","col","inProgress","reset","speedTimer","window","addEventListener","resize","bind","offset","document","documentElement","clientWidth","setState","removeEventListener","visited","parent","rowNum","colNum","arr","push","newWallBoxes","splice","indexOf","transBoxes","resultFlag","totalBoxes","length","newTransBoxes","getEdgeBoxes","Promise","resolve","reject","setTimeout","loopLength","currentResultBox","border","animation","startButton","disabled","resetButton","marginLeft","boxClick","wallPointerDown","createWall","wallPointerUp","Nav","margin","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","GsModal","isOpen","page","totalPage","prevDisabled","nextButtonContent","gif","content","heading","img1","gif1","gif2","gif3","gif4","gif5","Modal","show","onHide","size","Body","closeModal","padding","src","onError","alt","onNext","onPrev","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8d4ece71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/graphImg.7af320ab.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.07b67d01.gif\";","module.exports = __webpack_public_path__ + \"static/media/2.75fe405c.gif\";","module.exports = __webpack_public_path__ + \"static/media/3.a349d5d2.gif\";","module.exports = __webpack_public_path__ + \"static/media/4.af7bbf1c.gif\";","module.exports = __webpack_public_path__ + \"static/media/5.291d8472.gif\";","import React from \"react\";\nimport \"../style/Graph.css\";\n\nconst Box = (props) => {\n  let style,\n    icon = null;\n  if (props.offsetBool) {\n    style = {\n      width: props.boxSize + props.allBoxOffset + 1,\n    };\n  } else {\n    style = { width: props.boxSize + props.allBoxOffset };\n  }\n  if (props.className.valueOf() === \"startBox\".valueOf()) {\n    //if (s.valueOf() === new String(\"startBox\").valueOf()) {\n    icon = (\n      <div>\n        <i\n          class=\"fa fa-arrows\"\n          style={{\n            \"font-size\": props.allBoxOffset - 2 + \"px\",\n          }}\n        ></i>\n      </div>\n    );\n  } else if (props.className.valueOf() === \"endBox\".valueOf()) {\n    icon = (\n      <i\n        class=\"fa fa-bullseye\"\n        style={{\n          \"font-size\": props.allBoxOffset - 1 + \"px\",\n          \"vertical-align\": \"middle !important\",\n        }}\n      ></i>\n    );\n  }\n\n  return (\n    <button\n      style={style}\n      className={props.className}\n      onClick={props.onClick}\n      onPointerEnter={props.onPointerEnter}\n      onPointerDown={props.onPointerDown}\n      onPointerUp={props.onPointerUp}\n    >\n      {icon}\n    </button>\n  );\n};\nexport default Box;\n","import React, { Component } from \"react\";\nimport Box from \"./Box\";\n\nclass Grid extends Component {\n  renderBox(i, coli) {\n    // sizeOffset using pigeon hole principle\n    let className,\n      allBoxOffset = Math.floor(this.props.sizeOffset / this.props.cols),\n      offsetBool = coli < (this.props.sizeOffset % this.props.cols) - 1;\n    let { boxContent } = this.props;\n    if (boxContent.startBoxIndex === i) {\n      className = \"startBox\";\n    } else if (boxContent.endBoxIndex === i) {\n      className = \"endBox\";\n    } else if (boxContent.resultBoxes.includes(i)) {\n      className = \"resultBox\";\n    } else if (boxContent.wallBoxes.includes(i)) {\n      className = \"wallBox\";\n    } else if (boxContent.transitionBoxes.includes(i)) {\n      className = \"transitionBox\";\n    } else if (boxContent.coveredBoxes.includes(i)) {\n      className = \"coveredBox\";\n    } else {\n      className = \"box\";\n    }\n    return (\n      <Box\n        key={i}\n        id={i}\n        boxSize={this.props.boxSize}\n        allBoxOffset={allBoxOffset}\n        offsetBool={offsetBool}\n        className={className}\n        value={this.props.box[i]}\n        onClick={() => this.props.onClick(i)}\n        onPointerDown={() => this.props.onPointerDown(i)}\n        onPointerEnter={() => this.props.onPointerEnter(i)}\n        onPointerUp={() => this.props.onPointerUp(i)}\n      />\n    );\n  }\n\n  render() {\n    let ROW = this.props.rows,\n      COL = this.props.cols;\n    let arrRow = Array(ROW).fill(null),\n      arrCol = Array(COL).fill(null);\n    let boxRows = arrRow.map((box, indexRow) => {\n      return (\n        <div className=\"grid-row\" id={indexRow} key={indexRow}>\n          {arrCol.map((box, indexCol) => {\n            return this.renderBox(indexRow * COL + indexCol, indexCol);\n          })}\n        </div>\n      );\n    });\n\n    return <div>{boxRows}</div>;\n  }\n}\nexport default Grid;\n","import React, { Component } from \"react\";\nimport \"../style/Graph.css\";\nimport Grid from \"./Grid\";\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    const BOXSIZE = 5; // used for offset only, size greater than this will fit perfectly on the screen\n    this.BOXSIZE = BOXSIZE;\n    const ROW = 25,\n      COL = 50;\n    let wallPointer = false;\n    this.wallPointer = wallPointer;\n\n    let box = Array(ROW * COL).fill(null);\n    this.state = {\n      box: box,\n      boxContent: {\n        startBoxIndex: null,\n        endBoxIndex: null,\n        wallBoxes: [],\n        resultBoxes: [],\n        transitionBoxes: [],\n        coveredBoxes: [],\n        distance: 0,\n      },\n      status: \"Please select your starting node.\",\n      row: ROW,\n      col: COL,\n      sizeOffset: ROW % BOXSIZE,\n      inProgress: false,\n      reset: false,\n      speedTimer: 40,\n    };\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  resize() {\n    let offset =\n      document.documentElement.clientWidth -\n      (this.BOXSIZE - 1) * this.state.col;\n    this.setState({\n      sizeOffset: offset,\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resize.bind(this));\n  }\n  getEdgeBoxes(id, visited, parent) {\n    const ROW = this.state.row,\n      COL = this.state.col;\n    const rowNum = Math.floor(id / COL);\n    const colNum = id % COL;\n    let arr = [];\n    if (rowNum !== 0 && !visited[id - COL]) {\n      arr.push(id - COL);\n      visited[id - COL] = true;\n      parent[id - COL] = id;\n    }\n    if (rowNum !== ROW - 1 && !visited[id + COL]) {\n      arr.push(id + COL);\n      visited[id + COL] = true;\n      parent[id + COL] = id;\n    }\n    if (colNum !== 0 && !visited[id - 1]) {\n      arr.push(id - 1);\n      visited[id - 1] = true;\n      parent[id - 1] = id;\n    }\n    if (colNum !== COL - 1 && !visited[id + 1]) {\n      arr.push(id + 1);\n      visited[id + 1] = true;\n      parent[id + 1] = id;\n    }\n    //To consider corner edges.\n    /*if (rowNum !== 0 && colNum !== 0 && !visited[id - COL - 1]) {\n      arr.push(id - COL - 1);\n      visited[id - COL - 1] = true;\n      parent[id - COL - 1] = id;\n    }\n    if (rowNum !== 0 && colNum !== COL - 1 && !visited[id - COL + 1]) {\n      arr.push(id - COL + 1);\n      visited[id - COL + 1] = true;\n      parent[id - COL + 1] = id;\n    }\n    if (rowNum !== ROW - 1 && colNum !== COL - 1 && !visited[id + COL + 1]) {\n      arr.push(id + COL + 1);\n      visited[id + COL + 1] = true;\n      parent[id + COL + 1] = id;\n    }\n    if (rowNum !== ROW - 1 && colNum !== 0 && !visited[id + COL - 1]) {\n      arr.push(id + COL - 1);\n      visited[id + COL - 1] = true;\n      parent[id + COL - 1] = id;\n    }*/\n    return arr;\n  }\n  boxClick(i) {\n    if (this.state.inProgress) {\n      return;\n    } else {\n      this.setState({\n        reset: false,\n        inProgress: false,\n      });\n    }\n    const boxContent = this.state.boxContent,\n      { startBoxIndex, endBoxIndex, distance } = boxContent;\n    if (startBoxIndex === null) {\n      this.setState({\n        boxContent: {\n          startBoxIndex: i,\n          endBoxIndex: null,\n          wallBoxes: this.state.boxContent.wallBoxes,\n          resultBoxes: [],\n          transitionBoxes: [],\n          coveredBoxes: [],\n          distance: distance,\n        },\n        status: \"Now please select you ending or target node.\",\n      });\n    } else if (startBoxIndex !== null && endBoxIndex === null) {\n      if (startBoxIndex === i) {\n        return;\n      } else {\n        this.setState({\n          boxContent: {\n            startBoxIndex: startBoxIndex,\n            endBoxIndex: i,\n            wallBoxes: this.state.boxContent.wallBoxes,\n            resultBoxes: [],\n            transitionBoxes: [],\n            coveredBoxes: [],\n            distance: distance,\n          },\n          status: \"Drag or Click node to create a wall (weight = infinity)\",\n        });\n      }\n    }\n    return;\n  }\n  wallPointerDown(i) {\n    if (this.state.inProgress) {\n      return;\n    }\n    const boxContent = this.state.boxContent,\n      {\n        startBoxIndex,\n        endBoxIndex,\n        resultBoxes,\n        transitionBoxes,\n        coveredBoxes,\n        wallBoxes,\n        distance,\n      } = boxContent;\n    if (startBoxIndex !== null && endBoxIndex !== null) {\n      this.wallPointer = true;\n      let newWallBoxes = wallBoxes;\n      newWallBoxes.push(i);\n      this.setState({\n        boxContent: {\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: newWallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transitionBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n      });\n    }\n  }\n  wallPointerUp(i) {\n    if (this.state.inProgress) {\n      return;\n    }\n    this.wallPointer = false;\n  }\n  createWall(i) {\n    if (this.state.inProgress) {\n      return;\n    }\n    const boxContent = this.state.boxContent,\n      {\n        startBoxIndex,\n        endBoxIndex,\n        resultBoxes,\n        transitionBoxes,\n        coveredBoxes,\n        distance,\n      } = boxContent;\n    if (startBoxIndex !== null && endBoxIndex !== null && this.wallPointer) {\n      let newWallBoxes = this.state.boxContent.wallBoxes;\n      newWallBoxes.push(i);\n      this.setState({\n        boxContent: {\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: newWallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transitionBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n      });\n    }\n  }\n  async startButton() {\n    if (this.state.inProgress) {\n      return;\n    } else {\n      this.setState({\n        reset: false,\n      });\n    }\n\n    const boxContent = this.state.boxContent,\n      { startBoxIndex, endBoxIndex } = boxContent;\n    if (startBoxIndex === null) {\n      this.setState({\n        status: \"Please select the starting and target node before searching.\",\n      });\n      return;\n    } else if (endBoxIndex === null) {\n      this.setState({\n        status: \"Please select the target node before searching.\",\n      });\n      return;\n    } else {\n      this.setState({\n        status: \"Search in Progress, Have Fun!\",\n        inProgress: true,\n      });\n    }\n    let { wallBoxes } = boxContent;\n    while (wallBoxes.includes(endBoxIndex)) {\n      wallBoxes.splice(wallBoxes.indexOf(endBoxIndex), 1);\n    }\n\n    let transBoxes = [],\n      resultBoxes = [],\n      coveredBoxes = [],\n      distance = 0,\n      resultFlag = true;\n    let totalBoxes = this.state.row * this.state.col;\n    let visited = Array(totalBoxes).fill(false);\n    for (let i = 0; i < wallBoxes.length; i++) {\n      visited[wallBoxes[i]] = true;\n    }\n    let parent = Array(totalBoxes).fill(null);\n    visited[boxContent.startBoxIndex] = true;\n    transBoxes.push(startBoxIndex);\n    let newTransBoxes = [];\n    while (!transBoxes.includes(endBoxIndex)) {\n      distance++;\n      newTransBoxes = [];\n      for (let i = 0; i < transBoxes.length; i++) {\n        newTransBoxes.push(\n          ...this.getEdgeBoxes(transBoxes[i], visited, parent)\n        );\n      }\n      if (newTransBoxes.length === 0) {\n        resultFlag = false;\n        coveredBoxes.push(...transBoxes);\n        this.setState({\n          status:\n            \"No path found, shortest distance is infinity. Click reset to retry.\",\n          inProgress: false,\n        });\n        return;\n      }\n      coveredBoxes.push(...transBoxes);\n      transBoxes = [...newTransBoxes];\n      await new Promise((resolve, reject) => {\n        if (!this.state.reset) {\n          setTimeout(resolve, this.state.speedTimer);\n        } else {\n          this.setState({\n            boxContent: {\n              startBoxIndex: null,\n              endBoxIndex: null,\n              wallBoxes: [],\n              resultBoxes: [],\n              transitionBoxes: [],\n              coveredBoxes: [],\n              distance: 0,\n            },\n            status: \"Please select your starting node.\",\n            inProgress: false,\n            reset: true,\n          });\n          return;\n        }\n      });\n      this.setState({\n        boxContent: {\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: wallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n      });\n    }\n    if (resultFlag) {\n      coveredBoxes.push(...transBoxes);\n      let loopLength = distance,\n        currentResultBox = parent[endBoxIndex];\n      do {\n        resultBoxes.push(currentResultBox);\n        await new Promise((resolve, reject) => {\n          if (!this.state.reset) {\n            setTimeout(resolve, this.state.speedTimer);\n          } else {\n            this.setState({\n              boxContent: {\n                startBoxIndex: null,\n                endBoxIndex: null,\n                wallBoxes: [],\n                resultBoxes: [],\n                transitionBoxes: [],\n                coveredBoxes: [],\n                distance: 0,\n              },\n              status: \"Select your starting node.\",\n              inProgress: false,\n              reset: true,\n            });\n            return;\n          }\n        });\n        this.setState({\n          boxContent: {\n            startBoxIndex: startBoxIndex,\n            endBoxIndex: endBoxIndex,\n            wallBoxes: wallBoxes,\n            resultBoxes: resultBoxes,\n            coveredBoxes: coveredBoxes,\n            transitionBoxes: [],\n            distance: distance,\n          },\n        });\n        currentResultBox = parent[currentResultBox];\n        loopLength--;\n        if (loopLength === 0) {\n          this.setState({\n            inProgress: false,\n            status: \"Here is the required shortest path, click reset to retry.\",\n          });\n        }\n      } while (loopLength !== 0);\n    }\n  }\n  resetButton() {\n    if (this.state.inProgress) {\n      this.setState({\n        inProgress: false,\n        reset: true,\n      });\n    } else {\n      this.setState({\n        boxContent: {\n          startBoxIndex: null,\n          endBoxIndex: null,\n          wallBoxes: [],\n          resultBoxes: [],\n          transitionBoxes: [],\n          coveredBoxes: [],\n          distance: 0,\n        },\n        status: \"Please select your starting node.\",\n        inProgress: false,\n        reset: false,\n      });\n    }\n  }\n\n  render() {\n    const boxContent = this.state.boxContent;\n\n    return (\n      <div className=\"graph\">\n        <div className=\"graph-info\">\n          <div className=\"nodeInfo\">\n            <ul>\n              <li className=\"first\">\n                <button\n                  class=\"startBox\"\n                  style={{ border: \"transparent\", animation: \"none\" }}\n                >\n                  <i class=\"fa fa-arrows\"></i>\n                </button>\n                Starting Node\n              </li>\n              <li>\n                <button\n                  className=\"endBox\"\n                  style={{ border: \"transparent\", animation: \"none\" }}\n                >\n                  <i class=\"fa fa-bullseye\"></i>\n                </button>\n                Ending/Target Node\n              </li>\n              <li>\n                <box\n                  className=\"box\"\n                  style={{ border: \"transparent\", animation: \"none\" }}\n                />\n                Empty Node\n              </li>\n              <li>\n                <box\n                  className=\"coveredBox\"\n                  style={{ border: \"transparent\", animation: \"none\" }}\n                />\n                Covered Node\n              </li>\n              <li>\n                <box\n                  className=\"resultBox\"\n                  style={{ border: \"transparent\", animation: \"none\" }}\n                />\n                Result Path Node\n              </li>\n            </ul>\n            <button\n              class=\"btn btn-primary btn-md\"\n              onClick={() => this.startButton()}\n              disabled={this.state.inProgress}\n            >\n              Search Path\n            </button>\n            <button\n              class=\"btn btn-warning btn-md\"\n              onClick={() => this.resetButton()}\n              style={{ marginLeft: \"20px\" }}\n            >\n              Reset\n            </button>\n          </div>\n          <div className=\"status\">{this.state.status}</div>\n        </div>\n        <div className=\"graph-grid\">\n          <Grid\n            box={this.state.box}\n            rows={this.state.row}\n            cols={this.state.col}\n            boxSize={this.BOXSIZE}\n            sizeOffset={this.state.sizeOffset}\n            boxContent={boxContent}\n            onClick={(i) => this.boxClick(i)}\n            onPointerDown={(i) => this.wallPointerDown(i)}\n            onPointerEnter={(i) => this.createWall(i)}\n            onPointerUp={(i) => this.wallPointerUp(i)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\nexport default Graph;\n","import React, { Component } from \"react\";\nclass Nav extends Component {\n  render() {\n    return (\n      <nav\n        class=\"navbar navbar-expand-lg navbar-dark bg-dark \"\n        style={{ margin: \"0px\", \"border-radius\": \"0px\" }}\n      >\n        <a class=\"navbar-brand\" href=\"#\">\n          Dijkstra's Algorithm Visual\n        </a>\n        <button\n          class=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavDropdown\"\n          aria-controls=\"navbarNavDropdown\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul class=\"navbar-nav\">\n            <li class=\"nav-item active\">\n              <a class=\"nav-link\" href=\"#\">\n                Home <span class=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"#\">\n                (UnderConstruction) Features\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"#\">\n                (UnderConstruction) Have Your Own Graph?\n              </a>\n            </li>\n            <li class=\"nav-item dropdown\">\n              <a\n                class=\"nav-link dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdownMenuLink\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                (UnderConstruction) Dropdown\n              </a>\n              <div\n                class=\"dropdown-menu\"\n                aria-labelledby=\"navbarDropdownMenuLink\"\n              >\n                <a class=\"dropdown-item\" href=\"#\">\n                  Action\n                </a>\n                <a class=\"dropdown-item\" href=\"#\">\n                  Another action\n                </a>\n                <a class=\"dropdown-item\" href=\"#\">\n                  Something else here\n                </a>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport \"../style/GsModal.css\";\nimport img1 from \"../gifs/graphImg.jpg\";\nimport gif1 from \"../gifs/1.gif\";\nimport gif2 from \"../gifs/2.gif\";\nimport gif3 from \"../gifs/3.gif\";\nimport gif4 from \"../gifs/4.gif\";\nimport gif5 from \"../gifs/5.gif\";\n\nclass GsModal extends Component {\n  state = {\n    isOpen: true,\n    page: 1,\n    totalPage: 6,\n    prevDisabled: true,\n    nextButtonContent: \"Next\",\n  };\n  onNext() {\n    let { page } = this.state;\n    if (this.state.totalPage === page) {\n      this.setState({ isOpen: false });\n    } else if (page === this.state.totalPage - 1) {\n      this.setState({ page: page + 1, nextButtonContent: \"Finish\" });\n    } else {\n      this.setState({ page: page + 1, prevDisabled: false });\n    }\n  }\n  onPrev() {\n    let { page } = this.state;\n    if (this.state.page === 2) {\n      this.setState({\n        prevDisabled: true,\n        page: page - 1,\n      });\n    } else {\n      this.setState({ page: page - 1, nextButtonContent: \"Next\" });\n    }\n  }\n  closeModal() {\n    this.setState({ isOpen: false });\n  }\n  render() {\n    let gif, content, heading;\n    switch (this.state.page) {\n      case 1:\n        gif = img1;\n        heading = \"Welcome to Shortest Pathfinder!\";\n        content =\n          \"This is a project based of finding the shortest path in a graph using dijkstra's algoithm, which guarantees the searched path to be the shortest unlike other algorithms such as swarm algorithm, greedy best first search, depth-first search, etc\";\n\n        break;\n      case 2:\n        gif = gif1;\n        heading = \"How to get started?\";\n        content =\n          \"Select the starting node from which you want to search the path.\";\n\n        break;\n      case 3:\n        gif = gif2;\n        heading = \"How to get started?\";\n        content = \"Then select your target node.\";\n\n        break;\n      case 4:\n        gif = gif3;\n        heading = \"How to get started?\";\n        content =\n          \"You can create a wall by dragging or clicking on different nodes. The shortest path cannot go through these walls.\";\n\n        break;\n      case 5:\n        gif = gif4;\n        heading = \"How to get started?\";\n        content =\n          \"When you are done with building a wall, click on the start button to search for the required path.\";\n\n        break;\n      case 6:\n        gif = gif5;\n        heading = \"How to get started?\";\n        content =\n          \"You can clear everything anytime, just by clicking on the reset button at the top. Have fun!\";\n\n        break;\n      default:\n        gif = null;\n        heading = \"\";\n        content = \"\";\n    }\n    return (\n      <Modal\n        show={this.state.isOpen}\n        onHide={this.state.isOpen}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n      >\n        <Modal.Body>\n          <button\n            onClick={() => {\n              this.closeModal();\n            }}\n            class=\"close\"\n          >\n            x\n          </button>\n          <h1>{heading}</h1>\n          <p class=\"jumbotron\" style={{ padding: \"20px 0px 20px 0px\" }}>\n            <img src={gif} onError=\"onError=null\" alt=\"page gif\" />\n          </p>\n          <p>{content}</p>\n        </Modal.Body>\n        <div class=\"footer\">\n          <div class=\"pageNo\">\n            {this.state.page}/{this.state.totalPage}\n          </div>\n          <button\n            class=\"btn btn-primary btn-sm\"\n            onClick={() => {\n              this.onNext();\n            }}\n          >\n            {this.state.nextButtonContent}\n          </button>\n          <button\n            disabled={this.state.prevDisabled}\n            class=\"btn btn-primary btn-sm\"\n            onClick={() => {\n              this.onPrev();\n            }}\n          >\n            Prev\n          </button>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default GsModal;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Graph from \"./components/Graph.jsx\";\nimport Nav from \"./components/Nav.jsx\";\n\nimport GsModal from \"./components/GsModal.jsx\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GsModal />\n    <Nav />\n    <Graph />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}