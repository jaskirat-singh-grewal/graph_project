{"version":3,"sources":["App.js","components/Box.jsx","components/Grid.jsx","components/Graph.jsx","components/Nav.jsx","serviceWorker.js","index.js"],"names":["App","Box","props","style","span","s","String","className","offsetBool","width","boxSize","allBoxOffset","valueOf","class","onClick","onPointerEnter","onPointerDown","onPointerUp","Grid","i","coli","Math","floor","this","sizeOffset","cols","boxContent","startBoxIndex","endBoxIndex","resultBoxes","includes","wallBoxes","transitionBoxes","coveredBoxes","key","id","value","box","ROW","rows","COL","arrRow","Array","fill","arrCol","boxRows","map","indexRow","indexCol","renderBox","Component","Graph","BOXSIZE","wallPointer","state","distance","status","row","col","inProgress","reset","speedTimer","window","addEventListener","resize","bind","offset","document","documentElement","clientWidth","setState","removeEventListener","visited","parent","rowNum","colNum","arr","push","newWallBoxes","splice","indexOf","transBoxes","resultFlag","totalBoxes","length","newTransBoxes","getEdgeBoxes","Promise","resolve","reject","setTimeout","loopLength","currentResultBox","border","animation","startButton","disabled","resetButton","marginLeft","boxClick","wallPointerDown","createWall","wallPointerUp","Nav","margin","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.deca2ece.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a className=\"App-link\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Graph_Project_App\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport \"../style/Graph.css\";\n\nconst Box = (props) => {\n  let style,\n    span = null,\n    s = new String(props.className);\n  if (props.offsetBool) {\n    style = {\n      width: props.boxSize + props.allBoxOffset + 1,\n    };\n  } else {\n    style = { width: props.boxSize + props.allBoxOffset };\n  }\n  if (s.valueOf() === new String(\"startBox\").valueOf()) {\n    span = (\n      <span\n        class=\"glyphicon glyphicon-move\"\n        style={{\n          \"font-size\": props.allBoxOffset + 2 + \"px\",\n        }}\n      ></span>\n    );\n  } else if (s.valueOf() === new String(\"endBox\").valueOf()) {\n    span = (\n      <span\n        class=\"glyphicon glyphicon-record\"\n        style={{\n          \"font-size\": props.allBoxOffset + 2 + \"px\",\n        }}\n      ></span>\n    );\n  }\n\n  return (\n    <button\n      style={style}\n      className={props.className}\n      onClick={props.onClick}\n      onPointerEnter={props.onPointerEnter}\n      onPointerDown={props.onPointerDown}\n      onPointerUp={props.onPointerUp}\n    >\n      {span}\n    </button>\n  );\n};\nexport default Box;\n","import React, { Component } from \"react\";\nimport Box from \"./Box\";\n\nclass Grid extends Component {\n  renderBox(i, coli) {\n    // sizeOffset using pigeon hole principle\n    let className,\n      allBoxOffset = Math.floor(this.props.sizeOffset / this.props.cols),\n      offsetBool = coli < (this.props.sizeOffset % this.props.cols) - 1;\n    let { boxContent } = this.props;\n    if (boxContent.startBoxIndex === i) {\n      className = \"startBox\";\n    } else if (boxContent.endBoxIndex === i) {\n      className = \"endBox\";\n    } else if (boxContent.resultBoxes.includes(i)) {\n      className = \"resultBox\";\n    } else if (boxContent.wallBoxes.includes(i)) {\n      className = \"wallBox\";\n    } else if (boxContent.transitionBoxes.includes(i)) {\n      className = \"transitionBox\";\n    } else if (boxContent.coveredBoxes.includes(i)) {\n      className = \"coveredBox\";\n    } else {\n      className = \"box\";\n    }\n    return (\n      <Box\n        key={i}\n        id={i}\n        boxSize={this.props.boxSize}\n        allBoxOffset={allBoxOffset}\n        offsetBool={offsetBool}\n        className={className}\n        value={this.props.box[i]}\n        onClick={() => this.props.onClick(i)}\n        onPointerDown={() => this.props.onPointerDown(i)}\n        onPointerEnter={() => this.props.onPointerEnter(i)}\n        onPointerUp={() => this.props.onPointerUp(i)}\n      />\n    );\n  }\n\n  render() {\n    let ROW = this.props.rows,\n      COL = this.props.cols;\n    let arrRow = Array(ROW).fill(null),\n      arrCol = Array(COL).fill(null);\n    let boxRows = arrRow.map((box, indexRow) => {\n      return (\n        <div className=\"grid-row\" id={indexRow} key={indexRow}>\n          {arrCol.map((box, indexCol) => {\n            return this.renderBox(indexRow * COL + indexCol, indexCol);\n          })}\n        </div>\n      );\n    });\n\n    return <div>{boxRows}</div>;\n  }\n}\nexport default Grid;\n","import React, { Component } from \"react\";\nimport \"../style/Graph.css\";\nimport Grid from \"./Grid\";\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    const BOXSIZE = 5; // used for offset only, size greater than this will fit perfectly on the screen\n    this.BOXSIZE = BOXSIZE;\n    const ROW = 25,\n      COL = 50;\n    let wallPointer = false;\n    this.wallPointer = wallPointer;\n\n    const totalBoxes = ROW * COL;\n    let box = Array(ROW * COL).fill(null);\n    this.state = {\n      box: box,\n      boxContent: {\n        startBoxIndex: null,\n        endBoxIndex: null,\n        wallBoxes: [],\n        resultBoxes: [],\n        transitionBoxes: [],\n        coveredBoxes: [],\n        distance: 0,\n      },\n      status: \"Please select your starting node.\",\n      row: ROW,\n      col: COL,\n      sizeOffset: ROW % BOXSIZE,\n      inProgress: false,\n      reset: false,\n      speedTimer: 40,\n    };\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  resize() {\n    let offset =\n      document.documentElement.clientWidth -\n      (this.BOXSIZE - 1) * this.state.col;\n    this.setState({\n      sizeOffset: offset,\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resize.bind(this));\n  }\n  getEdgeBoxes(id, visited, parent) {\n    const ROW = this.state.row,\n      COL = this.state.col;\n    const rowNum = Math.floor(id / COL);\n    const colNum = id % COL;\n    let arr = [];\n    if (rowNum !== 0 && !visited[id - COL]) {\n      arr.push(id - COL);\n      visited[id - COL] = true;\n      parent[id - COL] = id;\n    }\n    if (rowNum !== ROW - 1 && !visited[id + COL]) {\n      arr.push(id + COL);\n      visited[id + COL] = true;\n      parent[id + COL] = id;\n    }\n    if (colNum !== 0 && !visited[id - 1]) {\n      arr.push(id - 1);\n      visited[id - 1] = true;\n      parent[id - 1] = id;\n    }\n    if (colNum !== COL - 1 && !visited[id + 1]) {\n      arr.push(id + 1);\n      visited[id + 1] = true;\n      parent[id + 1] = id;\n    }\n    //To consider corner edges.\n    /*if (rowNum !== 0 && colNum !== 0 && !visited[id - COL - 1]) {\n      arr.push(id - COL - 1);\n      visited[id - COL - 1] = true;\n      parent[id - COL - 1] = id;\n    }\n    if (rowNum !== 0 && colNum !== COL - 1 && !visited[id - COL + 1]) {\n      arr.push(id - COL + 1);\n      visited[id - COL + 1] = true;\n      parent[id - COL + 1] = id;\n    }\n    if (rowNum !== ROW - 1 && colNum !== COL - 1 && !visited[id + COL + 1]) {\n      arr.push(id + COL + 1);\n      visited[id + COL + 1] = true;\n      parent[id + COL + 1] = id;\n    }\n    if (rowNum !== ROW - 1 && colNum !== 0 && !visited[id + COL - 1]) {\n      arr.push(id + COL - 1);\n      visited[id + COL - 1] = true;\n      parent[id + COL - 1] = id;\n    }*/\n    return arr;\n  }\n  boxClick(i) {\n    if (this.state.inProgress) {\n      return;\n    } else {\n      this.setState({\n        reset: false,\n        inProgress: false,\n      });\n    }\n    const boxContent = this.state.boxContent,\n      { startBoxIndex, endBoxIndex, distance } = boxContent;\n    if (startBoxIndex === null) {\n      this.setState({\n        boxContent: {\n          startBoxIndex: i,\n          endBoxIndex: null,\n          wallBoxes: this.state.boxContent.wallBoxes,\n          resultBoxes: [],\n          transitionBoxes: [],\n          coveredBoxes: [],\n          distance: distance,\n        },\n        status: \"Now please select you ending or target node.\",\n      });\n    } else if (startBoxIndex !== null && endBoxIndex === null) {\n      if (startBoxIndex === i) {\n        return;\n      } else {\n        this.setState({\n          boxContent: {\n            startBoxIndex: startBoxIndex,\n            endBoxIndex: i,\n            wallBoxes: this.state.boxContent.wallBoxes,\n            resultBoxes: [],\n            transitionBoxes: [],\n            coveredBoxes: [],\n            distance: distance,\n          },\n          status: \"Drag or Click node to create a wall (weight = infinity)\",\n        });\n      }\n    }\n    return;\n  }\n  wallPointerDown(i) {\n    if (this.state.inProgress) {\n      return;\n    }\n    const boxContent = this.state.boxContent,\n      {\n        startBoxIndex,\n        endBoxIndex,\n        resultBoxes,\n        transitionBoxes,\n        coveredBoxes,\n        wallBoxes,\n        distance,\n      } = boxContent;\n    if (startBoxIndex !== null && endBoxIndex !== null) {\n      this.wallPointer = true;\n      let newWallBoxes = wallBoxes;\n      newWallBoxes.push(i);\n      this.setState({\n        boxContent: {\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: newWallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transitionBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n      });\n    }\n  }\n  wallPointerUp(i) {\n    if (this.state.inProgress) {\n      return;\n    }\n    this.wallPointer = false;\n  }\n  createWall(i) {\n    if (this.state.inProgress) {\n      return;\n    }\n    const boxContent = this.state.boxContent,\n      {\n        startBoxIndex,\n        endBoxIndex,\n        resultBoxes,\n        transitionBoxes,\n        coveredBoxes,\n        distance,\n      } = boxContent;\n    if (startBoxIndex !== null && endBoxIndex !== null && this.wallPointer) {\n      let newWallBoxes = this.state.boxContent.wallBoxes;\n      newWallBoxes.push(i);\n      this.setState({\n        boxContent: {\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: newWallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transitionBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n      });\n    }\n  }\n  async startButton() {\n    if (this.state.inProgress) {\n      return;\n    } else {\n      this.setState({\n        reset: false,\n      });\n    }\n\n    const boxContent = this.state.boxContent,\n      { startBoxIndex, endBoxIndex } = boxContent;\n    if (startBoxIndex === null) {\n      this.setState({\n        status: \"Please select the starting and target node before searching.\",\n      });\n      return;\n    } else if (endBoxIndex === null) {\n      this.setState({\n        status: \"Please select the target node before searching.\",\n      });\n      return;\n    } else {\n      this.setState({\n        status: \"Search in Progress, Have Fun!\",\n        inProgress: true,\n      });\n    }\n    let { wallBoxes } = boxContent;\n    while (wallBoxes.includes(endBoxIndex)) {\n      wallBoxes.splice(wallBoxes.indexOf(endBoxIndex), 1);\n    }\n\n    let transBoxes = [],\n      resultBoxes = [],\n      coveredBoxes = [],\n      distance = 0,\n      resultFlag = true;\n    let totalBoxes = this.state.row * this.state.col;\n    let visited = Array(totalBoxes).fill(false);\n    for (let i = 0; i < wallBoxes.length; i++) {\n      visited[wallBoxes[i]] = true;\n    }\n    let parent = Array(totalBoxes).fill(null);\n    visited[boxContent.startBoxIndex] = true;\n    transBoxes.push(startBoxIndex);\n    let newTransBoxes = [];\n    while (!transBoxes.includes(endBoxIndex)) {\n      distance++;\n      newTransBoxes = [];\n      for (let i = 0; i < transBoxes.length; i++) {\n        newTransBoxes.push(\n          ...this.getEdgeBoxes(transBoxes[i], visited, parent)\n        );\n      }\n      if (newTransBoxes.length === 0) {\n        resultFlag = false;\n        coveredBoxes.push(...transBoxes);\n        this.setState({\n          status:\n            \"No path found, shortest distance is infinity. Click reset to retry.\",\n          inProgress: false,\n        });\n        return;\n      }\n      coveredBoxes.push(...transBoxes);\n      transBoxes = [...newTransBoxes];\n      await new Promise((resolve, reject) => {\n        if (!this.state.reset) {\n          setTimeout(resolve, this.state.speedTimer);\n        } else {\n          this.setState({\n            boxContent: {\n              startBoxIndex: null,\n              endBoxIndex: null,\n              wallBoxes: [],\n              resultBoxes: [],\n              transitionBoxes: [],\n              coveredBoxes: [],\n              distance: 0,\n            },\n            status: \"Please select your starting node.\",\n            inProgress: false,\n            reset: true,\n          });\n          return;\n        }\n      });\n      this.setState({\n        boxContent: {\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: wallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n      });\n    }\n    if (resultFlag) {\n      coveredBoxes.push(...transBoxes);\n      let loopLength = distance,\n        currentResultBox = parent[endBoxIndex];\n      do {\n        resultBoxes.push(currentResultBox);\n        await new Promise((resolve, reject) => {\n          if (!this.state.reset) {\n            setTimeout(resolve, this.state.speedTimer);\n          } else {\n            this.setState({\n              boxContent: {\n                startBoxIndex: null,\n                endBoxIndex: null,\n                wallBoxes: [],\n                resultBoxes: [],\n                transitionBoxes: [],\n                coveredBoxes: [],\n                distance: 0,\n              },\n              status: \"Select your starting node.\",\n              inProgress: false,\n              reset: true,\n            });\n            return;\n          }\n        });\n        this.setState({\n          boxContent: {\n            startBoxIndex: startBoxIndex,\n            endBoxIndex: endBoxIndex,\n            wallBoxes: wallBoxes,\n            resultBoxes: resultBoxes,\n            coveredBoxes: coveredBoxes,\n            transitionBoxes: [],\n            distance: distance,\n          },\n        });\n        currentResultBox = parent[currentResultBox];\n        loopLength--;\n        if (loopLength === 0) {\n          this.setState({\n            inProgress: false,\n            status: \"Here is the required shortest path, click reset to retry.\",\n          });\n        }\n      } while (loopLength !== 0);\n    }\n  }\n  resetButton() {\n    if (this.state.inProgress) {\n      this.setState({\n        inProgress: false,\n        reset: true,\n      });\n    } else {\n      this.setState({\n        boxContent: {\n          startBoxIndex: null,\n          endBoxIndex: null,\n          wallBoxes: [],\n          resultBoxes: [],\n          transitionBoxes: [],\n          coveredBoxes: [],\n          distance: 0,\n        },\n        status: \"Please select your starting node.\",\n        inProgress: false,\n        reset: false,\n      });\n    }\n  }\n\n  render() {\n    const boxContent = this.state.boxContent;\n\n    return (\n      <div className=\"graph\">\n        <div className=\"graph-info\">\n          <div className=\"nodeInfo\">\n            <ul>\n              <li className=\"first\">\n                <button\n                  class=\"startBox\"\n                  style={{ border: \"transparent\", animation: \"none\" }}\n                >\n                  <span class=\"glyphicon glyphicon-move\"></span>\n                </button>\n                Starting Node\n              </li>\n              <li>\n                <button\n                  className=\"endBox\"\n                  style={{ border: \"transparent\", animation: \"none\" }}\n                >\n                  <span class=\"glyphicon glyphicon-record\"></span>\n                </button>\n                Ending/Target Node\n              </li>\n              <li>\n                <box\n                  className=\"box\"\n                  style={{ border: \"transparent\", animation: \"none\" }}\n                />\n                Empty Node\n              </li>\n              <li>\n                <box\n                  className=\"coveredBox\"\n                  style={{ border: \"transparent\", animation: \"none\" }}\n                />\n                Covered Node\n              </li>\n              <li>\n                <box\n                  className=\"resultBox\"\n                  style={{ border: \"transparent\", animation: \"none\" }}\n                />\n                Result Path Node\n              </li>\n            </ul>\n            <button\n              class=\"btn btn-primary btn-md\"\n              onClick={() => this.startButton()}\n              disabled={this.state.inProgress}\n            >\n              Search Path\n            </button>\n            <button\n              class=\"btn btn-warning btn-md\"\n              onClick={() => this.resetButton()}\n              style={{ marginLeft: \"20px\" }}\n            >\n              Reset\n            </button>\n          </div>\n          <div className=\"status\">{this.state.status}</div>\n        </div>\n        <div className=\"graph-grid\">\n          <Grid\n            box={this.state.box}\n            rows={this.state.row}\n            cols={this.state.col}\n            boxSize={this.BOXSIZE}\n            sizeOffset={this.state.sizeOffset}\n            boxContent={boxContent}\n            onClick={(i) => this.boxClick(i)}\n            onPointerDown={(i) => this.wallPointerDown(i)}\n            onPointerEnter={(i) => this.createWall(i)}\n            onPointerUp={(i) => this.wallPointerUp(i)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\nexport default Graph;\n","import React, { Component } from \"react\";\nclass Nav extends Component {\n  render() {\n    return (\n      <nav\n        class=\"navbar navbar-expand-lg navbar-dark bg-dark \"\n        style={{ margin: \"0px\", \"border-radius\": \"0px\" }}\n      >\n        <a class=\"navbar-brand\" href=\"#\">\n          Dijkstra's Algorithm Visual\n        </a>\n        <button\n          class=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavDropdown\"\n          aria-controls=\"navbarNavDropdown\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul class=\"navbar-nav\">\n            <li class=\"nav-item active\">\n              <a class=\"nav-link\" href=\"#\">\n                Home <span class=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"#\">\n                (UnderConstruction) Features\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"#\">\n                (UnderConstruction) Have Your Own Graph?\n              </a>\n            </li>\n            <li class=\"nav-item dropdown\">\n              <a\n                class=\"nav-link dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdownMenuLink\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                (UnderConstruction) Dropdown\n              </a>\n              <div\n                class=\"dropdown-menu\"\n                aria-labelledby=\"navbarDropdownMenuLink\"\n              >\n                <a class=\"dropdown-item\" href=\"#\">\n                  Action\n                </a>\n                <a class=\"dropdown-item\" href=\"#\">\n                  Another action\n                </a>\n                <a class=\"dropdown-item\" href=\"#\">\n                  Something else here\n                </a>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\nimport Graph from \"./components/Graph.jsx\";\nimport Nav from \"./components/Nav.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Nav />\n    <Graph />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}