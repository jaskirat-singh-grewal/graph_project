{"version":3,"sources":["App.js","components/Box.jsx","components/Grid.jsx","components/Graph.jsx","components/Nav.jsx","serviceWorker.js","index.js"],"names":["App","Box","props","style","offsetBool","width","boxSize","allBoxOffset","className","onClick","onPointerEnter","onPointerDown","onPointerUp","value","Grid","i","coli","Math","floor","this","sizeOffset","cols","boxContent","startBoxIndex","endBoxIndex","resultBoxes","includes","wallBoxes","transitionBoxes","coveredBoxes","key","id","box","ROW","rows","COL","arrRow","Array","fill","arrCol","boxRows","map","indexRow","indexCol","renderBox","Component","Graph","BOXSIZE","wallPointer","state","distance","row","col","window","addEventListener","resize","bind","offset","innerWidth","console","log","setState","removeEventListener","visited","parent","rowNum","colNum","arr","push","newWallBoxes","splice","indexOf","transBoxes","resultFlag","totalBoxes","length","newTransBoxes","getEdgeBoxes","Promise","resolve","setTimeout","loopLength","currentResultBox","class","padding","margin","buttonStart","boxClick","wallPointerDown","createWall","wallPointerUp","Nav","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.265d86da.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a className=\"App-link\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Graph_Project_App\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport \"../style/Graph.css\";\n\nconst Box = (props) => {\n  let style;\n  if (props.offsetBool) {\n    style = {\n      width: props.boxSize + props.allBoxOffset + 1,\n    };\n  } else {\n    style = { width: props.boxSize + props.allBoxOffset };\n  }\n  return (\n    <button\n      style={style}\n      className={props.className}\n      onClick={props.onClick}\n      onPointerEnter={props.onPointerEnter}\n      onPointerDown={props.onPointerDown}\n      onPointerUp={props.onPointerUp}\n    >\n      {props.value}\n    </button>\n  );\n};\nexport default Box;\n","import React, { Component } from \"react\";\nimport Box from \"./Box\";\n\nclass Grid extends Component {\n  renderBox(i, coli) {\n    // sizeOffset using pigeon hole principle\n    let className,\n      allBoxOffset = Math.floor(this.props.sizeOffset / this.props.cols),\n      offsetBool = coli < (this.props.sizeOffset % this.props.cols) - 1;\n    let { boxContent } = this.props;\n    if (boxContent.startBoxIndex === i) {\n      className = \"startBox\";\n    } else if (boxContent.endBoxIndex === i) {\n      className = \"endBox\";\n    } else if (boxContent.resultBoxes.includes(i)) {\n      className = \"resultBox\";\n    } else if (boxContent.wallBoxes.includes(i)) {\n      className = \"wallBox\";\n    } else if (boxContent.transitionBoxes.includes(i)) {\n      className = \"transitionBox\";\n    } else if (boxContent.coveredBoxes.includes(i)) {\n      className = \"coveredBox\";\n    } else {\n      className = \"box\";\n    }\n    return (\n      <Box\n        key={i}\n        id={i}\n        boxSize={this.props.boxSize}\n        allBoxOffset={allBoxOffset}\n        offsetBool={offsetBool}\n        className={className}\n        value={this.props.boxContent.box[i]}\n        onClick={() => this.props.onClick(i)}\n        onPointerDown={() => this.props.onPointerDown(i)}\n        onPointerEnter={() => this.props.onPointerEnter(i)}\n        onPointerUp={() => this.props.onPointerUp(i)}\n      />\n    );\n  }\n\n  render() {\n    let ROW = this.props.rows,\n      COL = this.props.cols;\n    let arrRow = Array(ROW).fill(null),\n      arrCol = Array(COL).fill(null);\n    let boxRows = arrRow.map((box, indexRow) => {\n      return (\n        <div className=\"grid-row\" id={indexRow} key={indexRow}>\n          {arrCol.map((box, indexCol) => {\n            return this.renderBox(indexRow * COL + indexCol, indexCol);\n          })}\n        </div>\n      );\n    });\n\n    return <div>{boxRows}</div>;\n  }\n}\nexport default Grid;\n","import React, { Component } from \"react\";\nimport \"../style/Graph.css\";\nimport Grid from \"./Grid\";\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    const BOXSIZE = 5; // used for offset only, size greater than this will fit perfectly on the screen\n    this.BOXSIZE = BOXSIZE;\n    let ROW = 25,\n      COL = 50;\n    let wallPointer = false;\n    this.wallPointer = wallPointer;\n\n    const totalBoxes = ROW * COL;\n    let box = Array(ROW * COL).fill(null);\n    this.state = {\n      boxContent: {\n        box: box,\n        startBoxIndex: null,\n        endBoxIndex: null,\n        wallBoxes: [],\n        resultBoxes: [],\n        transitionBoxes: [],\n        coveredBoxes: [],\n        distance: 0,\n      },\n      row: ROW,\n      col: COL,\n      sizeOffset: ROW % BOXSIZE,\n    };\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  resize() {\n    let offset = window.innerWidth - (this.BOXSIZE - 1) * this.state.col;\n    console.log(\"sizeOffset = \", offset);\n    this.setState({\n      boxContent: this.state.boxContent,\n      row: 25,\n      col: 50,\n      sizeOffset: offset,\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resize.bind(this));\n  }\n  getEdgeBoxes(id, visited, parent) {\n    const ROW = this.state.row,\n      COL = this.state.col;\n    const rowNum = Math.floor(id / COL);\n    const colNum = id % COL;\n    let arr = [];\n    if (rowNum !== 0 && !visited[id - COL]) {\n      arr.push(id - COL);\n      visited[id - COL] = true;\n      parent[id - COL] = id;\n    }\n    if (rowNum !== ROW - 1 && !visited[id + COL]) {\n      arr.push(id + COL);\n      visited[id + COL] = true;\n      parent[id + COL] = id;\n    }\n    if (colNum !== 0 && !visited[id - 1]) {\n      arr.push(id - 1);\n      visited[id - 1] = true;\n      parent[id - 1] = id;\n    }\n    if (colNum !== COL - 1 && !visited[id + 1]) {\n      arr.push(id + 1);\n      visited[id + 1] = true;\n      parent[id + 1] = id;\n    }\n    //To consider corner edges.\n    /*if (rowNum !== 0 && colNum !== 0 && !visited[id - COL - 1]) {\n      arr.push(id - COL - 1);\n      visited[id - COL - 1] = true;\n      parent[id - COL - 1] = id;\n    }\n    if (rowNum !== 0 && colNum !== COL - 1 && !visited[id - COL + 1]) {\n      arr.push(id - COL + 1);\n      visited[id - COL + 1] = true;\n      parent[id - COL + 1] = id;\n    }\n    if (rowNum !== ROW - 1 && colNum !== COL - 1 && !visited[id + COL + 1]) {\n      arr.push(id + COL + 1);\n      visited[id + COL + 1] = true;\n      parent[id + COL + 1] = id;\n    }\n    if (rowNum !== ROW - 1 && colNum !== 0 && !visited[id + COL - 1]) {\n      arr.push(id + COL - 1);\n      visited[id + COL - 1] = true;\n      parent[id + COL - 1] = id;\n    }*/\n    return arr;\n  }\n  boxClick(i) {\n    const boxContent = this.state.boxContent,\n      box = boxContent.box,\n      { startBoxIndex, endBoxIndex, distance } = boxContent;\n    if (startBoxIndex === null) {\n      this.setState({\n        boxContent: {\n          box: box,\n          startBoxIndex: i,\n          endBoxIndex: null,\n          wallBoxes: this.state.boxContent.wallBoxes,\n          resultBoxes: [],\n          transitionBoxes: [],\n          coveredBoxes: [],\n          distance: distance,\n        },\n        row: this.state.row,\n        col: this.state.col,\n        sizeOffset: this.state.sizeOffset,\n      });\n    } else if (startBoxIndex !== null && endBoxIndex === null) {\n      if (startBoxIndex === i) {\n        return;\n      } else {\n        this.setState({\n          boxContent: {\n            box: box,\n            startBoxIndex: startBoxIndex,\n            endBoxIndex: i,\n            wallBoxes: this.state.boxContent.wallBoxes,\n            resultBoxes: [],\n            transitionBoxes: [],\n            coveredBoxes: [],\n            distance: distance,\n          },\n          row: this.state.row,\n          col: this.state.col,\n          sizeOffset: this.state.sizeOffset,\n        });\n      }\n    }\n    return;\n  }\n  wallPointerDown(i) {\n    const boxContent = this.state.boxContent,\n      box = boxContent.box,\n      {\n        startBoxIndex,\n        endBoxIndex,\n        resultBoxes,\n        transitionBoxes,\n        coveredBoxes,\n        wallBoxes,\n        distance,\n      } = boxContent;\n    if (startBoxIndex !== null && endBoxIndex !== null) {\n      this.wallPointer = true;\n      let newWallBoxes = wallBoxes;\n      newWallBoxes.push(i);\n      this.setState({\n        boxContent: {\n          box: box,\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: newWallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transitionBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n        row: this.state.row,\n        col: this.state.col,\n        sizeOffset: this.state.sizeOffset,\n      });\n    }\n  }\n  wallPointerUp(i) {\n    this.wallPointer = false;\n  }\n  createWall(i) {\n    const boxContent = this.state.boxContent,\n      box = boxContent.box,\n      {\n        startBoxIndex,\n        endBoxIndex,\n        resultBoxes,\n        transitionBoxes,\n        coveredBoxes,\n        distance,\n      } = boxContent;\n    if (startBoxIndex !== null && endBoxIndex !== null && this.wallPointer) {\n      let newWallBoxes = this.state.boxContent.wallBoxes;\n      newWallBoxes.push(i);\n      this.setState({\n        boxContent: {\n          box: box,\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: newWallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transitionBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n        row: this.state.row,\n        col: this.state.col,\n        sizeOffset: this.state.sizeOffset,\n      });\n    }\n  }\n  async buttonStart() {\n    const boxContent = this.state.boxContent,\n      box = boxContent.box,\n      { startBoxIndex, endBoxIndex } = boxContent;\n    let { wallBoxes } = boxContent;\n    while (wallBoxes.includes(endBoxIndex)) {\n      wallBoxes.splice(wallBoxes.indexOf(endBoxIndex), 1);\n    }\n\n    let transBoxes = [],\n      resultBoxes = [],\n      coveredBoxes = [],\n      distance = 0,\n      resultFlag = true;\n    let totalBoxes = this.state.row * this.state.col;\n    let visited = Array(totalBoxes).fill(false);\n    for (let i = 0; i < wallBoxes.length; i++) {\n      visited[wallBoxes[i]] = true;\n    }\n    let parent = Array(totalBoxes).fill(null);\n    visited[boxContent.startBoxIndex] = true;\n    transBoxes.push(startBoxIndex);\n    let newTransBoxes = [];\n    while (!transBoxes.includes(endBoxIndex)) {\n      distance++;\n      newTransBoxes = [];\n      for (let i = 0; i < transBoxes.length; i++) {\n        newTransBoxes.push(\n          ...this.getEdgeBoxes(transBoxes[i], visited, parent)\n        );\n      }\n      if (newTransBoxes.length === 0) {\n        resultFlag = false;\n        coveredBoxes.push(...transBoxes);\n        return;\n      }\n      coveredBoxes.push(...transBoxes);\n      transBoxes = [...newTransBoxes];\n      await new Promise((resolve) => setTimeout(resolve, 20));\n      this.setState({\n        boxContent: {\n          box: box,\n          startBoxIndex: startBoxIndex,\n          endBoxIndex: endBoxIndex,\n          wallBoxes: wallBoxes,\n          resultBoxes: resultBoxes,\n          transitionBoxes: transBoxes,\n          coveredBoxes: coveredBoxes,\n          distance: distance,\n        },\n        row: this.state.row,\n        col: this.state.col,\n        sizeOffset: this.state.sizeOffset,\n      });\n    }\n    if (resultFlag) {\n      coveredBoxes.push(...transBoxes);\n      let loopLength = distance,\n        currentResultBox = parent[endBoxIndex];\n      do {\n        resultBoxes.push(currentResultBox);\n        await new Promise((resolve) => setTimeout(resolve, 20));\n        this.setState({\n          boxContent: {\n            box: box,\n            startBoxIndex: startBoxIndex,\n            endBoxIndex: endBoxIndex,\n            wallBoxes: wallBoxes,\n            resultBoxes: resultBoxes,\n            coveredBoxes: coveredBoxes,\n            transitionBoxes: [],\n            distance: distance,\n          },\n          row: this.state.row,\n          col: this.state.col,\n          sizeOffset: this.state.sizeOffset,\n        });\n        currentResultBox = parent[currentResultBox];\n        loopLength--;\n      } while (loopLength !== 0);\n    }\n  }\n\n  render() {\n    const boxContent = this.state.boxContent;\n\n    return (\n      <div className=\"graph\">\n        <div\n          class=\"jumbotron jumbotron-fluid\"\n          style={{\n            \"background-color\": \"#0f4c75\",\n            padding: \"30px\",\n            margin: \"0px 0px\",\n          }}\n        >\n          <div className=\"graph-info\">\n            <h1 class=\"display-4\">asdfasfads </h1>\n            <button\n              class=\"btn btn-primary btn-md\"\n              onClick={() => this.buttonStart()}\n            >\n              Start\n            </button>\n          </div>\n        </div>\n        <div className=\"graph-grid\">\n          <Grid\n            rows={this.state.row}\n            cols={this.state.col}\n            boxSize={this.BOXSIZE}\n            sizeOffset={this.state.sizeOffset}\n            boxContent={boxContent}\n            onClick={(i) => this.boxClick(i)}\n            onPointerDown={(i) => this.wallPointerDown(i)}\n            onPointerEnter={(i) => this.createWall(i)}\n            onPointerUp={(i) => this.wallPointerUp(i)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\nexport default Graph;\n","import React, { Component } from \"react\";\nclass Nav extends Component {\n  render() {\n    return (\n      <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a class=\"navbar-brand\" href=\"#\">\n          Navbar\n        </a>\n        <button\n          class=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavDropdown\"\n          aria-controls=\"navbarNavDropdown\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul class=\"navbar-nav\">\n            <li class=\"nav-item active\">\n              <a class=\"nav-link\" href=\"#\">\n                Home <span class=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"#\">\n                Features\n              </a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"#\">\n                Pricing\n              </a>\n            </li>\n            <li class=\"nav-item dropdown\">\n              <a\n                class=\"nav-link dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdownMenuLink\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                Dropdown link\n              </a>\n              <div\n                class=\"dropdown-menu\"\n                aria-labelledby=\"navbarDropdownMenuLink\"\n              >\n                <a class=\"dropdown-item\" href=\"#\">\n                  Action\n                </a>\n                <a class=\"dropdown-item\" href=\"#\">\n                  Another action\n                </a>\n                <a class=\"dropdown-item\" href=\"#\">\n                  Something else here\n                </a>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\nimport Graph from \"./components/Graph.jsx\";\nimport Nav from \"./components/Nav.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Nav />\n    <Graph />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}